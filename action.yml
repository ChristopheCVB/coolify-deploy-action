name: 'Deploy to Coolify'
description: 'Deploy an application to Coolify with optional deployment waiting'
branding:
  icon: 'upload-cloud'
  color: 'purple'

inputs:
  token:
    description: 'Coolify API token'
    required: true
  domain:
    description: 'Coolify domain (without https://)'
    required: false
    default: 'app.coolify.io'
  uuid:
    description: 'Resource UUID(s). Comma separated list is also accepted.'
    required: false
  tag:
    description: 'Tag name(s) to deploy. Comma separated list is also accepted.'
    required: false
  pr:
    description: 'Pull Request Id for deploying specific PR builds. Cannot be used with tag parameter.'
    required: false
  force:
    description: 'Force rebuild (without cache)'
    required: false
    default: 'false'
  waitForDeploy:
    description: 'Wait for deployment to complete'
    required: false
    default: 'false'
  timeout:
    description: 'Timeout in seconds for deployment waiting'
    required: false
    default: '300'
  interval:
    description: 'Interval in seconds for deployment waiting'
    required: false
    default: '10'

runs:
  using: 'composite'
  steps:
    - name: Deploy to Coolify
      shell: bash
      run: |
        echo "üöÄ Deploying to Coolify..."
        
        # Validate required parameters
        if [ -z "${{ inputs.uuid }}" ] && [ -z "${{ inputs.tag }}" ] && [ -z "${{ inputs.pr }}" ]; then
          echo "‚ùå Error: At least one of uuid, tag, or pr must be provided"
          exit 1
        fi
        
        # Validate that tag and pr are not used together
        if [ -n "${{ inputs.tag }}" ] && [ -n "${{ inputs.pr }}" ]; then
          echo "‚ùå Error: Cannot use both tag and pr parameters together"
          exit 1
        fi
        
        # Build the API URL with parameters
        API_URL="https://${{ inputs.domain }}/api/v1/deploy?force=${{ inputs.force }}"
        
        # Add uuid parameter if provided
        if [ -n "${{ inputs.uuid }}" ]; then
          API_URL="$API_URL&uuid=${{ inputs.uuid }}"
        fi
        
        # Add tag parameter if provided
        if [ -n "${{ inputs.tag }}" ]; then
          API_URL="$API_URL&tag=${{ inputs.tag }}"
        fi
        
        # Add pr parameter if provided
        if [ -n "${{ inputs.pr }}" ]; then
          API_URL="$API_URL&pr=${{ inputs.pr }}"
        fi
        
        # Make the deployment request
        echo "Making deployment request to: $API_URL"
        DEPLOY_RESPONSE=$(curl -s -w "\n%{http_code}" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          -H "Content-Type: application/json" \
          "$API_URL")
        
        # Extract response body and status code
        HTTP_STATUS=$(echo "$DEPLOY_RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$DEPLOY_RESPONSE" | head -n -1)
        
        echo "Response status: $HTTP_STATUS"
        echo "Response body: $RESPONSE_BODY"
        
        # Check if deployment was successful
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Deployment request successful"
          
          # Extract deployment UUIDs if waiting is enabled
          if [ "${{ inputs.waitForDeploy }}" = "true" ]; then
            # Extract all deployment UUIDs from the response
            DEPLOYMENT_UUIDS=$(echo "$RESPONSE_BODY" | jq -r '.deployments[]?.deployment_uuid // empty' | tr '\n' ' ')
            
            if [ -n "$DEPLOYMENT_UUIDS" ]; then
              # Convert to array and count deployments
              DEPLOYMENT_ARRAY=($DEPLOYMENT_UUIDS)
              DEPLOYMENT_COUNT=${#DEPLOYMENT_ARRAY[@]}
              
              echo "‚è≥ Waiting for $DEPLOYMENT_COUNT deployment(s) to complete..."
              echo "Deployment UUIDs: $DEPLOYMENT_UUIDS"
              
              # Wait for all deployments to complete
              TIMEOUT=${{ inputs.timeout }}
              ELAPSED=0
              INTERVAL=${{ inputs.interval }}
              
              while [ $ELAPSED -lt $TIMEOUT ]; do
                COMPLETED_COUNT=0
                FAILED_COUNT=0
                IN_PROGRESS_COUNT=0
                
                # Check status of each deployment
                for DEPLOYMENT_UUID in "${DEPLOYMENT_ARRAY[@]}"; do
                  # Get deployment status
                  STATUS_RESPONSE=$(curl -s -w "\n%{http_code}" \
                    -H "Authorization: Bearer ${{ inputs.token }}" \
                    "https://${{ inputs.domain }}/api/v1/deployments/$DEPLOYMENT_UUID")
                  
                  STATUS_HTTP=$(echo "$STATUS_RESPONSE" | tail -n1)
                  STATUS_BODY=$(echo "$STATUS_RESPONSE" | head -n -1)
                  
                  if [ "$STATUS_HTTP" -eq 200 ]; then
                    DEPLOYMENT_STATUS=$(echo "$STATUS_BODY" | jq -r '.status // empty')
                    
                    case $DEPLOYMENT_STATUS in
                      "successful"|"finished")
                        COMPLETED_COUNT=$((COMPLETED_COUNT + 1))
                        ;;
                      "failed"|"cancelled"|"skipped")
                        FAILED_COUNT=$((FAILED_COUNT + 1))
                        echo "‚ùå Deployment $DEPLOYMENT_UUID failed with status: $DEPLOYMENT_STATUS"
                        ;;
                      "running"|"pending"|"queued"|"in_progress"|"processing")
                        IN_PROGRESS_COUNT=$((IN_PROGRESS_COUNT + 1))
                        ;;
                      *)
                        IN_PROGRESS_COUNT=$((IN_PROGRESS_COUNT + 1))
                        echo "‚ö†Ô∏è Deployment $DEPLOYMENT_UUID has unknown status: $DEPLOYMENT_STATUS"
                        ;;
                    esac
                  else
                    IN_PROGRESS_COUNT=$((IN_PROGRESS_COUNT + 1))
                    echo "‚ö†Ô∏è Failed to get status for deployment $DEPLOYMENT_UUID (HTTP $STATUS_HTTP)"
                  fi
                done
                
                # Log progress
                echo "üìä Deployment progress: $COMPLETED_COUNT completed, $FAILED_COUNT failed, $IN_PROGRESS_COUNT in progress (${ELAPSED}s/${TIMEOUT}s)"
                
                # Check if all deployments are complete
                if [ $FAILED_COUNT -gt 0 ]; then
                  echo "‚ùå $FAILED_COUNT deployment(s) failed. Stopping wait."
                  exit 1
                elif [ $COMPLETED_COUNT -eq $DEPLOYMENT_COUNT ]; then
                  echo "‚úÖ All $DEPLOYMENT_COUNT deployment(s) completed successfully!"
                  exit 0
                else
                  # Still waiting for some deployments
                  sleep $INTERVAL
                  ELAPSED=$((ELAPSED + INTERVAL))
                fi
              done
              
              echo "‚è∞ Deployment timeout reached after ${TIMEOUT}s"
              echo "Final status: $COMPLETED_COUNT completed, $FAILED_COUNT failed, $IN_PROGRESS_COUNT still in progress"
              exit 1
            else
              echo "‚ö†Ô∏è Could not extract deployment UUIDs from response"
              exit 1
            fi
          else
            echo "‚úÖ Deployment request sent successfully (not waiting for completion)"
          fi
        else
          echo "‚ùå Deployment request failed with HTTP status: $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi 